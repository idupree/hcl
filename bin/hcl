#!/usr/bin/env node

var args = require('../lib/args.js');
var hcl = require('../lib/parser.js');
var compile = require('../lib/compile.js');
var file2js = require('../lib/file2js.js');
var exec = require('child_process').exec;
var repl = require('repl');
var format = require('hot-cocoa').format;

if (args.help) {
  console.log('help message here..');
  process.exit(0);
}

if (args.version) {
  console.log('Hot Cocoa Lisp version 0.0.1');
  process.exit(0);
}

if (args._[0]) {
  // TODO: add browser mode
  file2js(args._[0], function() {
    if (args.n) {
      exec(
        format('node ~~', [args._[0].replace(/\.hcl$/, '.js')]),
        function(error, stdout, stderr) {
          console.log(stdout, stderr);
        }
      );
    }
  });
} else {
  repl.start({
    prompt: 'hcl> ',
    eval: function(cmd, context, filename, callback) {
      try {
        var ast = hcl.analyze(hcl.parse(hcl.scan(cmd.toString())));
        var js = compile(ast[0][0], undefined, undefined, {
          add_to_outer_scope: function(name, value) {
            if (args.debug) {
              console.log('js (', name, '):', value);
            }
            global[name] = eval('(' + value + ')');
          },
          add_to_scope: function(name, value) {
            if (args.debug) {
              console.log('js (', name, '):', value);
            }
            global[name] = eval('(' + value + ')');
          }
        });
        if (args.debug) {
          console.log('js:', js);
        }
        var res = eval('(' + js.replace(/;$/, '') + ')');
        callback(null, res);
      } catch(e) {
        callback(null, e);
      }
    },
    writer: function(value) {
      return require('util')
        .inspect(value,
                 false, // show hidden
                 null, // depth
                 true) // colors
        .replace(/[:,]/g, '')
        .replace(/{}/g, '{ }')
        .replace(/\[\]/g, '[ ]')
        .replace(/'/g, '"');
    }
  });
}
