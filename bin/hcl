#!/usr/bin/env node

var _ = require('underscore');
var args = require('../lib/args.js');
var hcl = require('../lib/parser.js');
var compile = require('../lib/compile.js');
var file2js = require('../lib/file2js.js');
var exec = require('child_process').exec;
var path = require('path');
var fs = require('fs');
var repl = require('repl');
var format = require('hot-cocoa').format;

if (args.help) {
  process.stdout.write(
    fs.readFileSync(
      path.dirname(process.mainModule.filename) +
        '/../etc/help_message'
    ).toString()
  );
  process.exit(0);
}

if (args.version) {
  console.log(format('Hot Cocoa Lisp version ~~', [
    require('../package.json').version]));
  process.exit(0);
}

if (args._[0]) {
  file2js(args._[0], function() {
    if (args.n) {
      exec(
        format('node ~~', [args._[0].replace(/\.hcl$/, '.js')]),
        function(error, stdout, stderr) {
          console.log(stdout, stderr);
        }
      );
    }
  });
} else {
  if (args.u) {
    var underscore_keys = Object.keys(_);
    for (var i = 0; i < underscore_keys.length; i++) {
      if (global[underscore_keys[i]] === undefined) {
        global[underscore_keys[i]] = _[underscore_keys[i]];
      }
    }
  }
  repl.start({
    prompt: 'hcl> ',
    eval: function(cmd, context, filename, callback) {
      if (cmd.replace(/^\(/, '').replace(/\)$/, '').trim().length === 0) {
        callback(null);
      } else {
        try {
          var ast = hcl.analyze(hcl.parse(hcl.scan(cmd.toString())));
          var js = compile(ast[0][0], undefined, undefined, {
            repl_mode: true,
            omit_annotations: true,
            add_to_outer_scope: function(name, value) {
              if (args.debug) {
                console.log('js (', name, '):', value);
              }
              global[name] = eval('(' + value + ')');
            },
            add_to_scope: function(name, value) {
              if (args.debug) {
                console.log('js (', name, '):', value);
              }
              global[name] = eval('(' + value + ')');
            }
          });
          if (args.debug) {
            console.log('js:', js.trim());
          }
          var res = eval('(' + js.replace(/;$/, '') + ')');
          callback(null, res);
        } catch(e) {
          console.log(console.log(e.stack));
          callback(null, e);
        }
      }
    },
    writer: function(value) {
      return require('util')
        .inspect(value,
                 false, // show hidden
                 null, // depth
                 true) // colors
        .replace(/[:,]/g, '')
        .replace(/{}/g, '{ }')
        .replace(/\[\]/g, '[ ]')
        .replace(/'/g, '"');
    }
  });
}
