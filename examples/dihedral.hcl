(def dihedral-subtract
	 (# (a b size)
		(let (u_1 (>> a 1)
			  v_1 (& a 1)
			  u_2 (>> b 1)
			  v_2 (& b 1))
		  (if (= 1 v_1)
			  (bit-or (<< (% (+ size u_1 (- u_2)) (>> size 1)) 1)
					  (if (zero? v_2) 1 0))
			(bit-or (<< (% (+ u_1 u_2) (>> size 1)) 1)
					  v_2)))))

(def size (let (n (integer (nth process.argv 2)))
			(cond
			 ((or (not (integer? n)) (< n 1)) 6)
			 ((odd? n) (-1 n))
			 (true n))))

(process.stdout.write "   ")
(times (i size)
	   (process.stdout.write (cat i " ")))
(process.stdout.write "\n")
(times (i size)
	   (process.stdout.write (cat i "  "))
	   (times (j size)
			  (process.stdout.write (cat (dihedral-subtract i j size) " ")))
	   (process.stdout.write "\n"))
